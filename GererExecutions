import java.io.FileNotFoundException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

public class GererExecutions {
	int[] dateActuelle = {0};
	static int nbTacheTache = 0;
	static int nbTacheDependance = 2;
	static int nbTachePriorite = 0;
	static String[][] planning ;
	static Dependance instanceDependance;
	String[][] tableauTache;
	String[][] tableauDependance;
	String[][] tableauPriorite;

	public GererExecutions() throws FileNotFoundException {
		
		String tachesPath = "E:/Outil/Workspace/Ordonnanceur/Ordonnanceur/bin/fichiers_config/taches.txt";
		Tache instanceTache=new Tache();
		String[] contenuFichierTaches = new String[instanceTache.getLigneFichierTaches()];
		
		String prioritesPath = "E:/Outil/Workspace/Ordonnanceur/Ordonnanceur/bin/fichiers_config/priorites.txt";
		Priorite instancePriorite=new Priorite();
		String[] contenuFichierPriorites = new String[instancePriorite.getLigneFichierPriorites()];
		
		String dependancesPath = "E:/Outil/Workspace/Ordonnanceur/Ordonnanceur/bin/fichiers_config/dependances.txt";
		instanceDependance=new Dependance();
		String[] contenuFichierDependances = new String[OuvrirFichier.compterLigne(dependancesPath)];
		
		
		contenuFichierTaches = instanceTache.ouvrirFichierTaches();
		
		contenuFichierPriorites = instancePriorite.ouvrirFichierPriorite();
		
		contenuFichierDependances = instanceDependance.ouvrirFichierDependance();
		
		//TEST/*
		
		System.out.println("nombres de colone pour taches.txt :" +instanceTache.getPatternParLigne());
		
		System.out.println("nombres de colone pour priorites.txt :" +instancePriorite.getPatternParLigne());
		
		System.out.println("nombres de colone pour dependances.txt :" +instanceDependance.getPatternParLigne());
		
		tableauTache = new String[instanceTache.getLigneFichierTaches()][instanceTache.getPatternParLigne()];
	
		tableauDependance = new String[instanceDependance.getLigneFichierDependances()][instanceDependance.getPatternParLigne()+1];	
				
		tableauPriorite = new String[instancePriorite.getLigneFichierPriorites()][instancePriorite.getPatternParLigne()];
		
		System.out.println("taches.txt :");
		for(int i=0;i<OuvrirFichier.compterLigne(tachesPath);i++)
		{
			if(contenuFichierTaches[i]!=" ")
			{
				System.out.println(contenuFichierTaches[i]);
				tableauTache[i]= contenuFichierTaches[i].split("// ");
			}
		}
		
		System.out.println("\npriorites.txt :");
		for(int i=0;i<OuvrirFichier.compterLigne(prioritesPath);i++)
		{
			if(contenuFichierPriorites[i]!=null)
			{
				System.out.println(contenuFichierPriorites[i]);
				tableauPriorite[i]= contenuFichierPriorites[i].split("// ");
			}
		}
		
		System.out.println("\ndependances.txt :");
		for(int i=0;i<OuvrirFichier.compterLigne(dependancesPath);i++)
		{
			
				System.out.println(contenuFichierDependances[i]);
				tableauDependance[i]= contenuFichierDependances[i].split("// ");
		
		}
		
		//TEST*/
		nbTacheTache = instanceTache.getLigneFichierTaches();
		nbTacheDependance = instanceDependance.getLigneFichierDependances();
		nbTachePriorite = instancePriorite.getLigneFichierPriorites();
		
		if (this.verifierCoherence())
		{
			System.out.println("Fichiers de configuration coherent");
			//demarrage du core
			
			//dateActuelle = this.recupDateActuelle();
			
			this.CreerPlanning(tableauDependance, tableauPriorite, tableauTache);
			
			
			
			if(this.verifierCoherencePlanning())
			{
				System.out.println("Planning coherent");
				Execution listeExecution = new Execution();
				listeExecution.start();
			}
			else{System.out.println("Erreur generation planning");}
			
		}
		else if(this.verifierCoherence() == false)
			System.out.println("mauvaise configuration veuillez editer les fichiers de configuration");
		
	}
	
	
	
	
	
	
	
	
	public int[] traductionDate(String dateDefault)
	{
		int[] dateInt = new int[5];

		
		String[] dateDebutString = new String[2];
		String[] dateString = new String[3];
		String[] heureString = new String[2];
		
		dateDebutString = dateDefault.split(" ");
		
		heureString = dateDebutString[0].split(":");
		dateString = dateDebutString[1].split("/");
		//System.out.println("date/heure : "+heureString[0]+":"+heureString[1]+" "+dateString[0]+"/"+dateString[1]+"/"+dateString[2]);
		
		
		//format jj/mm/aa/hh/mm
		dateInt[0] = Integer.parseInt(dateString[0]);
		dateInt[1] = Integer.parseInt(dateString[1]);
		dateInt[2] = Integer.parseInt(dateString[2]);
		dateInt[3] = Integer.parseInt(heureString[0]);
		dateInt[4] = Integer.parseInt(heureString[1]);

		return dateInt;
	}
	
	public int[] recupDateActuelle()
	{
		int[] maDate = new int[7];
		Date laDate = new Date();
	
		//System.out.println(calendar.getTime());
		
		
		Locale locale = Locale.getDefault();

		DateFormat dateFormat = new SimpleDateFormat("hh:mm: dd/MM/yy/");
		
		
		maDate = this.traductionDate(dateFormat.format(laDate));
		//format jj/mm/aa/hh/mm
		System.out.println("date/heure : "+maDate[0]+"/"+maDate[1]+"/"+maDate[2]+" "+maDate[3]+":"+maDate[4]);

		return maDate;
	}
	
	public  boolean verifierCoherence() throws FileNotFoundException
	{
		if(nbTacheTache + nbTacheDependance + nbTachePriorite==(3*nbTacheTache)){return true;}
		else{return false;}
	}
	
	public  boolean verifierCoherencePlanning() throws FileNotFoundException
	{
		int nbTacheCoherente =0;
		synchronized(instanceDependance)
		{
			
				
			for(int j=0;j<this.nbTacheDependance;j++)
			{			
					
				if(tableauTache[j][1].equals(tableauDependance[j][1]) && (tableauTache[j][1].equals(tableauPriorite[j][1])))
				{
					nbTacheCoherente++;
				}	
						
			}
			if(nbTacheCoherente == nbTacheDependance)
			{
				return true;
			}
			else{return false;}
		}
		
		
	}
	
	public void CreerPlanning(String[][] dependance , String[][] priorite , String[][] tache ) throws FileNotFoundException
	{
	
		planning = new String [nbTacheDependance][instanceDependance.getPatternParLigne()];
		String[] buffer = new String[instanceDependance.getPatternParLigne()];
		int ligne = 0;
		int colonne = 0;
		while(ligne < nbTacheDependance)
		{
			
			buffer = this.bourrerBuffer(ligne+1,dependance[ligne],priorite[ligne],tache[ligne]);
			
			planning[ligne] = buffer;
			
			ligne++;
			colonne++;
			if (colonne >instanceDependance.getPatternParLigne())
				colonne = 0;
			
		}
	}
	
	public String[] bourrerBuffer(int ligne,String[] dependance , String[] priorite , String[] tache ) throws FileNotFoundException
	{
		int caseD =2;
		String[] retour = new String[instanceDependance.getPatternLigne(ligne)+2];
		//System.out.println(instanceDependance.getPatternLigne(caseD));
		retour[0] = tache[1];
		//System.out.println(retour[0]+" "+tache[1]);
		retour[1] = priorite[2];
		//System.out.println(retour[1]);
		retour[2] = tache[2];
		//System.out.println("TEST "+dependance[3]);
		
		for(int i=3;i<=(instanceDependance.getPatternLigne(ligne));i++)
		{
			
			//if ((retour[i] != null) && (dependance[caseD] != null))//System.out.println(instanceDependance.getPatternParLigne()+" "+ i);
			
			retour[i] = dependance[caseD];
			
		//System.out.println("TEST["+ caseD+"]" +retour[i]);
			caseD++;
		}
		
		return retour;
	}
	
	public String[] rechercherTache(String nomTache, String[][] nomTableau)
	{
		for (int i=0;i<nomTableau.length;i++)
		{
			if(nomTableau[i][1].equals(nomTache))
			{
				return nomTableau[i];
				
			}
	
		}
		return null;
	}
	
}
